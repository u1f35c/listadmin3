#!/usr/bin/python3
#
# /// script
# requires-python = ">=3"
# dependencies = [
#   "mechanicalsoup",
# ]
# ///
#
# Copyright 2023 Jonathan McDowell <noodles@earth.li>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.

"""
 listadmin3 is an unimaginatively named command line tool to manage Mailman3
 lists and process queues, without the need to go to the Mailman3 interface.
 It currently allows for the inspection of message moderation queues, allowing
 for messages to be accepted or discarded manually. It is inspired by
 listadmin, which is a much more fully featured tool that operates on Mailman 2
 lists.
"""

import argparse
import os
import json
import re
import sys
import termios
import tty

import mechanicalsoup # type: ignore

HAVE_COLOUR = True
try:
    import termcolor
except ImportError:
    HAVE_COLOUR = False

#
DEBUG = False

# The default configuration. Every configuration option needs to be listed here,
# as the keys are used for sanity checking the configuration when we read it.
default_conf: dict[str, str] = {
        'base_url': '',
        'password': '',
        'username': '',
}

class HTMLParseError(Exception):
    """ Exception class for reporting HTML parse errors """


class Mailman3UI:
    """ Class allowing interactions with the Mailman3 web interface """
    def __init__(self, url, username, password):
        self._browser = mechanicalsoup.StatefulBrowser(
            soup_config={'features': 'lxml'},
            user_agent='listadmin3/0.1',
        )
        self._baseurl = url
        self._username = username
        self._password = password

    def login(self):
        """ Logs in to the Mailman3 instance """
        self._browser.open(self._baseurl + 'accounts/login/')
        self._browser.select_form(selector='form.login')
        self._browser["login"] = self._username
        self._browser["password"] = self._password
        page = self._browser.submit_selected()

        login_error = page.soup.find("div", class_="alert-danger")
        if not login_error:
            return (True, "")

        return (False, login_error.string)

    def logout(self):
        """ Logs out of the Mailman3 instance """
        self._browser.open(self._baseurl + 'accounts/logout/')

    def _fetch_held_messages(self, listname: str):
        """ Get the held messages form for the given listname """
        page = self._browser.open(self._baseurl + 'postorius/lists/' + listname + '/held_messages')

        count_select = page.soup.find("select", attrs={'name': 'count'})
        if not count_select:
            # Assume no held messages (could check for "There are currently no held messages."
            # message)
            return None

        page_select = page.soup.find("form", class_="jump-to-page")
        # Check if there are more messages than the current page and fetch up to 200 if so.
        if page_select and page_select.find("option", attrs={'value': '2'}):
            if DEBUG:
                print("Pagination detected; fetching more pages")

            count_form = count_select.parent
            count = 10
            for option in count_select.find_all('option'):
                if 'selected' in option.attrs:
                    count = option['value']
            if count != 200:
                count_form = self._browser.select_form(selector=count_form)
                count_form.set_select({'count': 200})
                page = self._browser.submit_selected()

        if DEBUG:
            print(f"Held messages :{page.text}:")

        msg_form = page.soup.find("h2")
        return msg_form

    def get_held_messages(self, listname: str) -> list[dict]:
        """ Get a list of held messages for the supplied listname """
        msg_form = self._fetch_held_messages(listname)
        if msg_form is None:
            return []
        msg_form = msg_form.find_next_sibling("form")
        msg_list = msg_form.find("tbody")
        msgs = []
        for msg_row in msg_list.find_all("tr"):
            msg = {}
            row_data = msg_row.find("td")
            msg_id = row_data.find("input")
            msg['id'] = msg_id['value']
            row_data = row_data.find_next_sibling("td")
            subject = row_data.find("a")
            msg["subject"] = subject.text.strip()
            row_data = row_data.find_next_sibling("td")
            msg["sender"] = row_data.text
            row_data = row_data.find_next_sibling("td")
            msg["reason"] = row_data.text
            row_data = row_data.find_next_sibling("td")
            msg["date"] = row_data.text

            msgs.append(msg)

        return msgs

    def set_held_messages(self, listname: str, action: str, msgs: list[int]):
        """ Set the status for the list of held messages for the supplied listname

            action must be one of 'accept', 'discard', or 'reject'.
        """
        msg_form = self._fetch_held_messages(listname)
        msg_form = msg_form.find_next_sibling("form")
        msg_form = self._browser.select_form(selector=msg_form)
        msg_form.set_checkbox({'choices': msgs})
        msg_form.choose_submit(action)
        self._browser.submit_selected()

    def get_message(self, listname: str, msg: int) -> dict:
        """ Retrieves a message from a list """
        page = self._browser.open(self._baseurl + 'postorius/api/list/' + listname +
                                  '/held_message/' + str(msg))
        if page.status_code != 200:
            return {}

        return json.loads(page.text)

    def get_pending_subscriptions(self, listname: str) -> list[dict]:
        """ Get a list of subscription requests awaiting approval for the supplied listname """
        page = self._browser.open(self._baseurl + 'postorius/lists/' + listname +
                                  '/subscription_requests')

        count_select = page.soup.find("select", attrs={'name': 'count'})
        if not count_select:
            # Assume no held messages (could check for "There are currently no subscriptions
            # requests for thist list." message)
            return []

        if DEBUG:
            print(page.text)

        sub_table = page.soup.find("h2")
        sub_table = sub_table.find_next_sibling("div")
        sub_table = sub_table.find("table")
        sub_list = sub_table.find("tbody")
        subs = []
        for sub_row in sub_list.find_all("tr"):
            sub = {}
            row_data = sub_row.find("td")
            sub["email"] = row_data.text.strip()
            row_data = row_data.find_next_sibling("td")
            req_hash = row_data.find("form")
            if req_hash is not None:
                req_hash = re.search(r'.*/handle_subscription_request/([^/]+)/',
                                 req_hash['action'])
            if req_hash is None:
                req_hash = row_data.find("a")
                req_hash = re.search(
                        r'.*/handle_subscription_request/([^/]+)/(|accept|reject|discard)$',
                        req_hash['href'])
            if req_hash:
                sub["req_hash"] = req_hash.group(1)

            subs.append(sub)

        return subs

    def set_pending_subscription(self, listname: str, action: str, req_hash: str):
        """ Set a pending subscription request for the supplied listname

        action can be "accept", "reject" or "discard". req_hash is the hash provided from
        get_pending_subscriptions.
        """

        page = self._browser.open(self._baseurl + 'postorius/lists/' + listname +
                                  '/handle_subscription_request/' +
                                  req_hash + '/' + action)
        if DEBUG:
            print(page.text)


def cprint(text: str,
            colour: "str | None" = None) -> None:
    """ Print colourized text.

    Wraps termcolor.cprint and falls back to no colours if unavailable.
    """

    if HAVE_COLOUR:
        termcolor.cprint(text, colour)
    else:
        print(text)


def getch(allowed_chars="") -> str:
    """ Get a single character from stdin without waiting for enter to be pressed """
    stdin_fd = sys.stdin.fileno()
    orig = termios.tcgetattr(stdin_fd)

    try:
        tty.setcbreak(stdin_fd)
        # pylint: disable=invalid-name
        c = sys.stdin.read(1)
        while allowed_chars != "" and allowed_chars.find(c) == -1:
            c = sys.stdin.read(1)
        print(c, end="")
        return c
    finally:
        termios.tcsetattr(stdin_fd, termios.TCSAFLUSH, orig)


def read_config(filename: str) -> list:
    """ Reads the config file and returns a list of list configurations """

    conf = default_conf
    lists: list[dict[str, str]] = []

    # pylint: disable=invalid-name
    with open(filename, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()

            if not line or line[0] == '#':
                continue

            parts = line.split()
            if len(parts) != 2:
                print("Invalid config option:", line)
                sys.exit(1)

            if parts[0] == 'list':
                # Each list has its own distinct config, so make a copy of the dict
                lists.append(dict(conf))
                lists[-1]['list'] = parts[1]
            else:
                if parts[0] not in conf:
                    print("Unknown config option:", line)
                    sys.exit(1)
                conf[parts[0]] = parts[1]

    return lists


#pylint: disable=too-many-branches
def moderate_messages(mmui: Mailman3UI, listname: str) -> bool:
    """ Moderate the outstanding messages for given list for the supplied Mailman3 web interface

    Retrieves the list of held messages for the list, and displays each in turn to the user.
    The user can then select what to do with the message. Once all messages for the list have
    been dealt with the user is asked to confirm that we should proceed.
    """

    msgs = mmui.get_held_messages(listname)
    count = len(msgs)
    if count == 0:
        return False

    print(f"{count} messages")

    todo: dict[str, list[int]] = {
            'accept': [],
            'discard': [],
    }
    i = 0
    while i < len(msgs):
        cprint(f"({i+1}/{count}) {msgs[i]['sender']} / {msgs[i]['date']}:", "yellow")
        print(f"  {msgs[i]['reason']}: {msgs[i]['subject']}")
        print("(a)ccept, (d)iscard, (b)ody, (h)eaders, (s)kip, (q)uit? ", end='', flush=True)

        # pylint: disable=invalid-name
        c = getch("abdhqs")
        print()
        if c == 'a':
            todo['accept'].append(msgs[i]['id'])
        elif c == 'b':
            msg = mmui.get_message(listname, msgs[i]['id'])
            curline = 0
            for line in msg['msg']['body'].split('\n'):
                print(f"| {line}")
                curline += 1
                if curline >= 20:
                    break
            continue
        elif c == 'd':
            todo['discard'].append(msgs[i]['id'])
        elif c == 'h':
            msg = mmui.get_message(listname, msgs[i]['id'])
            for line in msg['msg']['headers'].split('\n'):
                print(f"| {line}")
            continue
        elif c == 'q':
            print("Moving on...")
            return True
        i+= 1

    if len(todo['accept']) > 0 or len(todo['discard']) > 0:
        print(f"{len(todo['accept'])} to accept, "
              f"{len(todo['discard'])} to discard, "
               "proceed? (y/n) [yes] ",
                end='', flush=True)

        # pylint: disable=invalid-name
        c = getch("ny\n")
        if c != '\n':
            print()
        if c == 'n':
            print("Moving on...")
            return True

        if len(todo['accept']) > 0:
            mmui.set_held_messages(listname, 'accept', todo['accept'])
        if len(todo['discard']) > 0:
            mmui.set_held_messages(listname, 'discard', todo['discard'])

    return True


def moderate_subscribers(mmui: Mailman3UI, listname: str) -> bool:
    """ Moderate pending subscribers for the given list for the supplied Mailman3 web interface

    Retrieves the list of outstanding subscribers for the list, and displays each in turn to the
    user. The user can then select what to do with the subscriber.

    Returns true if there were some subscribers pending.
    """

    subs = mmui.get_pending_subscriptions(listname)
    count = len(subs)
    if count == 0:
        return False

    print(f"{count} subscription requests")

    i = 1
    for sub in subs:
        print(f"({i}/{count}) {sub['email']}")
        print("(a)ccept, (d)iscard, (r)eject, (s)kip, (q)uit? ", end='', flush=True)

        # pylint: disable=invalid-name
        c = getch("adrsq")
        print()
        if c == 'a':
            mmui.set_pending_subscription(listname, 'accept', sub['req_hash'])
        elif c == 'd':
            mmui.set_pending_subscription(listname, 'discard', sub['req_hash'])
        elif c == 'r':
            mmui.set_pending_subscription(listname, 'discard', sub['req_hash'])
        elif c == 'q':
            print("Moving on...")
            return True
        i+= 1

    return True


def moderate_list(mmui: Mailman3UI, listname: str):
    """ Moderate the subscribers + messages for a given list """

    print(f"fetching data for {listname} ... ", end='', flush=True)
    listname.replace('@', '.')

    did_subs = moderate_subscribers(mmui, listname)
    did_msgs = moderate_messages(mmui, listname)

    if not (did_subs or did_msgs):
        print("nothing in queue")


def listadmin3():
    """ A command line mailman3 moderator queue tool """
    global DEBUG # pylint: disable=global-statement

    parser = argparse.ArgumentParser(
        description='A command line mailman3 moderator queue tool',
        epilog='When run without options will process the lists given in the config file and '
        'interactively query what to be done with outstanding subscripion requests + held messages.'
    )
    parser.add_argument("--config", help="path to config file",
                        default=os.getenv('HOME', '.') + '/.listadmin3.ini')
    parser.add_argument("--debug", help="enable (very verbose) debugging output",
                        action="store_true")
    parser.add_argument("--version", action='version', version='%(prog)s 0.1')
    args = parser.parse_args()

    if args.debug:
        DEBUG = True

    lists = read_config(args.config)
    last = ('', '', '')
    webui = None

    # pylint: disable=invalid-name
    for l in lists:
        # Check if we need to login, either for the first time or because our
        # list config details changed.
        if last != (l['base_url'], l['username'], l['password']):
            if webui is not None:
                webui.logout()

            webui = Mailman3UI(url=l['base_url'],
                       username=l['username'],
                       password=l['password'])
            login_ok, details = webui.login()

            if not login_ok:
                print("Could not login to web interface:", details)
                return

            last = (l['base_url'], l['username'], l['password'])

        moderate_list(webui, l['list'])


if __name__ == '__main__':
    listadmin3()
